spring:
  # ShardingSphere 配置项
  shardingsphere:
    datasource:

      # 所有数据源的名字
      names: ds-orders-0-master, ds-orders-1-master, ds-orders-0-slave0, ds-orders-1-slave1

      # 订单 orders<主> 数据源配置 00
      ds-orders-0-master:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/ds-orders-0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password:

      # 订单 orders<主> 数据源配置 01
      ds-orders-1-master:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/ds-orders-1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password:

      # 订单 orders<从> 数据源配置 03
      ds-orders-0-slave0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/ds-orders-0-slave0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password:

      # 订单 orders<从> 数据源配置 04
      ds-orders-1-slave1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/ds-orders-1-slave1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password:

    # 分片规则
    sharding:
      tables:
        # orders 表配置
        orders:
          actualDataNodes: ds-orders-0.orders_$->{[0,2,4,6]}, ds-orders-1.orders_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-orders-$->{user_id % 2}
              sharding-column: user_id
          table-strategy:
            inline:
              algorithm-expression: orders_$->{user_id % 8}
              sharding-column: user_id

      # 读写分离配置，对应 YamlMasterSlaveRuleConfiguration 配置类
      master-slave-rules:
        ds-orders-0:
          master-data-source-name: ds-orders-0-master # 主库数据源
          slave-data-source-names: ds-orders-0-slave0 # 从库数据源
        ds-orders-1:
          master-data-source-name: ds-orders-1-master # 主库数据源
          slave-data-source-names: ds-orders-1-slave1 # 从库数据源

    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL

# mybatis-plus 配置内容
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。
  global-config:
    db-config:
      id-type: none # 虽然 MyBatis Plus 也提供 ID 生成策略，但是还是使用 Sharding-JDBC 的
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
  mapper-locations: classpath*:mapper/*.xml
  type-aliases-package: com.example.shardingjdbc.dataobject